[
  {
    "question": "Write a function that returns the sum of the two numbers",
    "template": "def addTwo(a, b):",
    "testCases": [
      {
        "exe": "print(addTwo(3, 5), end='')",
        "answer": "8"
      },
      {
        "exe": "print(addTwo(-3, -7), end='')",
        "answer": "-10"
      },
      {
        "exe": "print(addTwo(100, 3000), end='')",
        "answer": "3100"
      }
    ]
  },
  {
    "question": "Write a function that returns the sum of the three numbers",
    "template": "def addThree(a, s,d ):",
    "testCases": [
      {
        "exe": "print(addThree(3, 5, 1), end='')",
        "answer": "9"
      },
      {
        "exe": "print(addThree(-3, -7, 11), end='')",
        "answer": "1"
      },
      {
        "exe": "print(addThree(100, 3000,-100), end='')",
        "answer": "3000"
      }
    ]
  },
  {
    "question": "Write a function that returns the average of the three numbers",
    "template": "def aveThree(q, w, e):",
    "testCases": [
      {
        "exe": "print(aveThree(5, 5, 5), end='')",
        "answer": "5"
      },
      {
        "exe": "print(aveThree(10, 5, 15), end='')",
        "answer": "10"
      },
      {
        "exe": "print(aveThree(100, 300,-100), end='')",
        "answer": "100"
      }
    ]
  },
  {
    "question": "Write a function that returns the average of the two numbers",
    "template": "def aveTwo(x, y):",
    "testCases": [
      {
        "exe": "print(aveTwo(5, 5), end='')",
        "answer": "5"
      },
      {
        "exe": "print(aveTwo(10, 13), end='')",
        "answer": "13"
      },
      {
        "exe": "print(aveTwo(100, 100), end='')",
        "answer": "100"
      }
    ]
  },
  {
    "question": "Write a function that returns the absolute value of a number",
    "template": "def absValue(num):",
    "testCases": [
      {
        "exe": "print(absValue(5), end='')",
        "answer": "5"
      },
      {
        "exe": "print(absValue(-7), end='')",
        "answer": "7"
      },
      {
        "exe": "print(absValue(0), end='')",
        "answer": "0"
      }
    ]
  },
  {
    "question": "Write a function that calculates the area of a rectangle",
    "template": "def recArea(length, width):",
    "testCases": [
      {
        "exe": "print(recArea(4, 6), end='')",
        "answer": "24"
      },
      {
        "exe": "print(recArea(20, 3), end='')",
        "answer": "60"
      },
      {
        "exe": "print(recArea(0, 10), end='')",
        "answer": "0"
      }
    ]
  },
  {
    "question": "Write a function that multiplies two numbers",
    "template": "def mulTwo(a, b):",
    "testCases": [
      {
        "exe": "print(mulTwo(3, 5), end='')",
        "answer": "15"
      },
      {
        "exe": "print(mulTwo(-2, 6), end='')",
        "answer": "-12"
      },
      {
        "exe": "print(mulTwo(0, 100), end='')",
        "answer": "0"
      }
    ]
  },
  {
    "question": "Write a function that checks if a word is a palindrome",
    "template": "def wordPal(word):",
    "testCases": [
      {
        "exe": "print(wordPal('racecar'), end='')",
        "answer": "True"
      },
      {
        "exe": "print(wordPal('hello'), end='')",
        "answer": "False"
      },
      {
        "exe": "print(wordPal('deified'), end='')",
        "answer": "True"
      }
    ]
  },
  {
    "question": "Write a function that checks if a sentence is a palindrome",
    "template": "def senPal(sentence):",
    "testCases": [
      {
        "exe": "print(senPal('Able was I saw Elba'), end='')",
        "answer": "True"
      },
      {
        "exe": "print(senPal('This is not a palindrome'), end='')",
        "answer": "False"
      },
      {
        "exe": "print(senPal('A man, a plan, a canal, Panama!'), end='')",
        "answer": "True"
      }
    ]
  },
  {
    "question": "Write a function that checks if a phrase is a palindrome",
    "template": "def phrasePal(phrase):",
    "testCases": [
      {
        "exe": "print(phrasePal('Madam in Eden, Iâ€™m Adam'), end='')",
        "answer": "True"
      },
      {
        "exe": "print(phrasePal('Not a palindrome'), end='')",
        "answer": "False"
      },
      {
        "exe": "print(phrasePal('Step on no pets'), end='')",
        "answer": "True"
      }
    ]
  },
  {
    "question": "Write a function that checks if a number is a palindrome",
    "template": "def numPal(number):",
    "testCases": [
      {
        "exe": "print(numPal(121), end='')",
        "answer": "True"
      },
      {
        "exe": "print(numPal(12345), end='')",
        "answer": "False"
      },
      {
        "exe": "print(numPal(12321), end='')",
        "answer": "True"
      }
    ]
  },
  {
    "question": "Write a function to calculate the area of a square",
    "template": "def squArea(side):",
    "testCases": [
      {
        "exe": "print(squArea(5), end='')",
        "answer": "25"
      },
      {
        "exe": "print(squArea(10), end='')",
        "answer": "100"
      },
      {
        "exe": "print(squArea(2.5), end='')",
        "answer": "6.25"
      }
    ]
  },
  {
      "question": "Create a function that takes a number as an argument, increments the number by +1 and returns the result.",
      "template": "def increNum(num):",
      "testCases": [
          {
              "exe": "increNum(0)",
              "answer": 1
          },
          {
              "exe": "increNum(9)",
              "answer": 10
          },
          {
              "exe": "increNum(-3)",
              "answer": -2
          }
      ]
  },
  {
      "question": "Create a function that takes a string and returns it as an integer.",
      "template": "def strInt(string):",
      "testCases": [
          {
              "exe": "strInt('6')",
              "answer": 6
          },
          {
              "exe": "strInt('1000')",
              "answer": 1000
          },
          {
              "exe": "strInt('12')",
              "answer": 12
          }
      ]
      
  },
  {
      "question": "Create a function that takes the age in years and returns the age in days.",
      "template": "def calAge(age):",
      "testCases": [
          {
              "exe": "calAge(65)",
              "answer": 23725
          },
          {
              "exe": "calAge(0)",
              "answer": 0
          },
          {
              "exe": "calAge(20)",
              "answer": 7300
          }
      ]
  },
  {
      "question": "Create a function that takes length and width and finds the perimeter of a rectangle.",
      "template": "def rectPeri(length, width):",
      "testCases": [
          {
              "exe": "rectPeri(6, 7)",
              "answer": 26
          },
          {
              "exe": "rectPeri(20, 10)",
              "answer": 60
          },
          {
              "exe": "rectPeri(2, 9)",
              "answer": 22
          }
      ]
  },
  {
      "question": "Create a function that takes voltage and current and returns the calculated power.",
      "template": "def calPow(voltage, current):",
      "testCases": [
          {
              "exe": "calPow(230, 10)",
              "answer": 2300
          },
          {
              "exe": "calPow(110, 3)",
              "answer": 330
          },
          {
              "exe": "calPow(480, 20)",
              "answer": 9600
          }
          ]
  },
  {
      "question": "Create a function that takes a base number and an exponent number and returns the calculation.",
      "template": "def calExpo(base, exponent):",
      "testCases": [
          {
              "exe": "calExpo(5, 5)",
              "answer": 3125
          },
          {
              "exe": "calExpo(10, 10)",
              "answer": 10000000000
          },
          {
              "exe": "calExpo(3, 3)",
              "answer": 27
          }
          ]
  },

  {
      "question": "Create a function that takes a boolean variable flag and returns it as a string.",
      "template": "def boolStr(flag):",
      "testCases": [
          {
              "exe": "boolStr(True)",
              "answer": "True"
          },
          {
              "exe": "boolStr(False)",
              "answer": "False"
          },
          {
              "exe": "boolStr(False)",
              "answer": "False"
          }
      ]
  },
  {
    "question": "Write a function to calculate the area of a right triangle",
    "template": "def triArea(base, height):",
    "testCases": [
      {
        "exe": "print(triArea(5, 10), end='')",
        "answer": "25.0"
      },
      {
        "exe": "print(triArea(7, 3), end='')",
        "answer": "10.5"
      },
      {
        "exe": "print(triArea(2.5, 4), end='')",
        "answer": "5.0"
      }
    ]
  },
  {
    "question": "Write a function to calculate the area of a right rectangle",
    "template": "def recArea(base, height):",
    "testCases": [
      {
        "exe": "print(recArea(5, 10), end='')",
        "answer": "25.0"
      },
      {
        "exe": "print(recArea(7, 3), end='')",
        "answer": "10.5"
      },
      {
        "exe": "print(recArea(2.5, 4), end='')",
        "answer": "5.0"
      }
    ]
  },
  {
    "question": "Write a function to calculate the area of a circle",
    "template": "def circArea(radius):",
    "testCases": [
      {
        "exe": "print(circArea(5), end='')",
        "answer": "78.54"
      },
      {
        "exe": "print(circArea(10), end='')",
        "answer": "314.16"
      },
      {
        "exe": "print(circArea(2.5), end='')",
        "answer": "19.63"
      }
    ]
  },
  {
    "question": "Python: How to check if a number is odd or even?",
    "template": "def oddEven(number):",
    "testCases": [
        {
            "exe": "print(oddEven(4), end='')",
            "answer": "Even"
        },
        {
            "exe": "print(oddEven(7), end='')",
            "answer": "Odd"
        },
        {
            "exe": "print(oddEven(0), end='')",
            "answer": "Even"
        }
    ]
   },
   {
    "question": "Count the number of occurrences in a list",
    "template": "def countElem(lst, element):",
    "testCases": [
        {
            "exe": "print(countElem([1, 2, 3, 4, 4, 4, 5], 4), end='')",
            "answer": "3"
        },
        {
            "exe": "print(countElem(['a', 'b', 'c', 'a', 'a'], 'a'), end='')",
            "answer": "3"
        },
        {
            "exe": "print(countElem([True, False, True, True], False), end='')",
            "answer": "1"
        }
    ]
},
{
    "question": "Create n copies of the first 2 characters of a given string",
    "template": "def copies(string, n):",
    "testCases": [
        {
            "exe": "print(copies('Hello', 3), end='')",
            "answer": "'HeHeHe'"
        },
        {
            "exe": "print(copies('Python', 5), end='')",
            "answer": "'PyPyPyPyPy'"
        },
        {
            "exe": "print(copies('Hi', 2), end='')",
            "answer": "'HiHi'"
        }
    ]
},
{
    "question": "Count the number of vowels in a string",
    "template": "def countVol(string):",
    "testCases": [
        {
            "exe": "print(countVol('Hello'), end='')",
            "answer": "2"
        },
        {
            "exe": "print(countVol('Python'), end='')",
            "answer": "1"
        },
        {
            "exe": "print(countVol('Hi there'), end='')",
            "answer": "3"
        }
    ]
},
{
    "question": "Check if a specified value is contained in a group of values",
    "template": "def checkVal(value, group):",
    "testCases": [
        {
            "exe": "print(checkVal(3, [1, 2, 3, 4, 5]), end='')",
            "answer": "True"
        },
        {
            "exe": "print(checkVal('Python', ['Java', 'Python', 'C++']), end='')",
            "answer": "True"
        },
        {
            "exe": "print(checkVal(10, [5, 8, 12, 15]), end='')",
            "answer": "False"
        }
    ]
},
{
    "question": "Create a histogram",
    "template": "def histogram(items):",
    "testCases": [
        {
            "exe": "histogram([2, 3, 6, 5])",
            "output": "**\n***\n******\n*****"
        },
        {
            "exe": "histogram([1, 2, 4])",
            "output": "*\n**\n****"
        },
        {
            "exe": "histogram([0, 7, 3, 1])",
            "output": "\n*******\n***\n*"
        }
    ]
},
{
    "question": "Concatenate all elements in a list into a string",
    "template": "def concatElem(lst):",
    "testCases": [
        {
            "exe": "print(concatElem(['Hello', 'World', '!']), end='')",
            "answer": "HelloWorld!"
        },
        {
            "exe": "print(concatElem([1, 2, 3, 4, 5]), end='')",
            "answer": "12345"
        },
        {
            "exe": "print(concatElem(['Open', 'AI', 'is', 'awesome']), end='')",
            "answer": "OpenAIisawesome"
        }
    ]
},
    {
    "question": "Print all even numbers from a list, stopping at 237",
    "template": "def evenNum(numbers):",
    "testCases": [
        {
            "exe": "evenNum([1, 2, 3, 4, 5, 6, 237, 238, 239])",
            "output": "2 4 6"
        },
        {
            "exe": "evenNum([10, 20, 30, 40, 237, 50, 60, 70])",
            "output": "10 20 30 40"
        },
        {
            "exe": "evenNum([237, 1, 2, 3, 4, 5, 6])",
            "output": ""
        }
    ]
},
{
    "question": "Print set of colors not present in other list",
    "template": "def printColors(colors1, colors2):",
    "testCases": [
        {
            "exe": "printColors(['red', 'green', 'blue'], ['blue', 'yellow', 'black'])",
            "output": "{'red', 'green'}"
        },
        {
            "exe": "printColors(['orange', 'purple', 'pink'], ['red', 'orange', 'blue'])",
            "output": "{'purple', 'pink'}"
        },
        {
            "exe": "printColors(['red', 'green', 'blue'], ['red', 'green', 'blue'])",
            "output": "set()"
        }
    ]
},
{
    "question": "Find the greatest common divisor (GCD) of two positive integers",
    "template": "def gcd(num1, num2):",
    "testCases": [
        {
            "exe": "print(gcd(12, 18))",
            "output": "6"
        },
        {
            "exe": "print(gcd(24, 36))",
            "output": "12"
        },
        {
            "exe": "print(gcd(7, 23))",
            "output": "1"
        }
    ]
},
{
    "question": "Find the least common multiple (LCM) of two positive integers",
    "template": "def lcm(num1, num2):",
    "testCases": [
        {
            "exe": "print(lcm(3, 4))",
            "output": "12"
        },
        {
            "exe": "print(lcm(7, 10))",
            "output": "70"
        },
        {
            "exe": "print(lcm(12, 18))",
            "output": "36"
        }
    ]
},
{
    "question": "Find the sum of three given integers. If two values are equal, the sum will be zero.",
    "template": "def sumThree(a, b, c):",
    "testCases": [
        {
            "exe": "print(sumThree(1, 2, 3))",
            "output": "6"
        },
        {
            "exe": "print(sumThree(2, 2, 3))",
            "output": "0"
        },
        {
            "exe": "print(sumThree(4, 5, 6))",
            "output": "15"
        }
    ]
},    
{
    "question": "Find the sum of two given integers. If the sum is between 15 and 20 (inclusive), return 20.",
    "template": "def sumTwo(a, b):",
    "testCases": [
        {
            "exe": "print(sumTwo(10, 5))",
            "output": "15"
        },
        {
            "exe": "print(sumTwo(8, 7))",
            "output": "20"
        },
        {
            "exe": "print(sumTwo(3, 2))",
            "output": "5"
        }
    ]
},
{
    "question": "Check if two given integer values are equal or if their sum or difference is 5.",
    "template": "def intVal(a, b):",
    "testCases": [
        {
            "exe": "print(intVal(2, 2))",
            "output": "True"
        },
        {
            "exe": "print(intVal(2, 7))",
            "output": "True"
        },
        {
            "exe": "print(intVal(10, 5))",
            "output": "True"
        }
    ]
},
{
    "question": "Add two objects if both objects are of integer type.",
    "template": "def addInt(a, b):",
    "testCases": [
        {
            "exe": "print(addInt(2, 3))",
            "output": "5"
        },
        {
            "exe": "print(addInt(10, 5))",
            "output": "15"
        },
        {
            "exe": "print(addInt('2', 3))",
            "output": "None"
        }
    
    ]
},
{
    "question": "Display your details like name, age, and address in three different lines.",
    "template": "def details():",
    "testCases": [
        {
            "exe": "details()",
            "output": "Name: John\nAge: 25\nAddress: 123 Main Street"
        },
        {
            "exe": "details()",
            "output": "Name: Jane\nAge: 30\nAddress: 456 Elm Avenue"
        },
        {
            "exe": "details()",
            "output": "Name: Alex\nAge: 40\nAddress: 789 Oak Road"
        }
    ]
},
{
    "question": "Python program to solve (x + y) * (x + y).",
    "template": "def solveExp(x, y):",
    "testCases": [
        {
            "exe": "print(solveExp(2, 3), end='')",
            "answer": "25"
        },
        {
            "exe": "print(solveExp(0, 0), end='')",
            "answer": "0"
        },
        {
            "exe": "print(solveExp(-2, 5), end='')",
            "answer": "9"
        }
    ]
},
{
    "question": "Compute the future value of a specified principal amount, rate of interest, and a number of years.",
    "template": "def futureVal(principal, rate, years):",
    "testCases": [
        {
            "exe": "print(futureVal(1000, 0.05, 5), end='')",
            "answer": "1276.2815625000003"
        },
        {
            "exe": "print(futureVal(5000, 0.03, 10), end='')",
            "answer": "6715.56764182446"
        },
        {
            "exe": "print(futureVal(2000, 0.08, 3), end='')",
            "answer": "2517.1200000000003"
        }
    ]
},    
{
    "question": "How to find the distance between two points in Python?",
    "template": "import math\ndef distCal(x1, y1, x2, y2):",
    "testCases": [
        {
            "exe": "print(distCal(0, 0, 3, 4), end='')",
            "answer": "5.0"
        },
        {
            "exe": "print(distCal(-2, 5, 1, -3), end='')",
            "answer": "9.486832980505138"
        },
        {
            "exe": "print(distCal(10, 10, 10, 10), end='')",
            "answer": "0.0"
        }
    ]
},
{
    "question": "Parse a string to Float or Integer",
    "template": "def parseStr(input_str):\n",
    "testCases": [
        {
            "exe": "print(parseStr('3.14'), end='')",
            "answer": "3.14"
        },
        {
            "exe": "print(parseStr('10'), end='')",
            "answer": "10"
        },
        {
            "exe": "print(parseStr('5.0'), end='')",
            "answer": "5.0"
        }
    ]
},
{
    "question": "Print without newline or space",
    "template": "def woNewline(message):\n",
    "testCases": [
        {
            "exe": "woNewline('Hello')",
            "answer": "Hello"
        },
        {
            "exe": "woNewline('World')",
            "answer": "World"
        },
        {
            "exe": "woNewline('Python')",
            "answer": "Python"
        }
    ]
},
{
    "question": "Convert feet and inches to centimeters",
    "template": "def feetCent(feet, inches):",
    "testCases": [
        {
            "exe": "feetCent(5, 8)",
            "answer": 172.72
        },
        {
            "exe": "feetCent(6, 0)",
            "answer": 182.88
        },
        {
            "exe": "feetCent(4, 11)",
            "answer": 149.86
        }
    ]
},
{
    "question": "Calculate the hypotenuse of a right-angled triangle",
    "template": "import math\n\ndef calHypo(side1, side2):",
    "testCases": [
        {
            "exe": "calHypo(3, 4)",
            "answer": 5.0
        },
        {
            "exe": "calHypo(5, 12)",
            "answer": 13.0
        },
        {
            "exe": "calHypo(8, 15)",
            "answer": 17.0
        }
    ]
},
{
    "question": "Convert feet to inches",
    "template": "def feetInch(feet):",
    "testCases": [
        {
            "exe": "feetInch(5)",
            "answer": 60
        },
        {
            "exe": "feetInch(6)",
            "answer": 72
        },
        {
            "exe": "feetInch(10)",
            "answer": 120
        }
    ]
},       
{
    "question": "Convert feet to yards",
    "template": "def feetYards(feet):",
    "testCases": [
        {
            "exe": "feetYards(5)",
            "answer": 1.6666666666666667
        },
        {
            "exe": "feetYards(10)",
            "answer": 3.3333333333333335
        },
        {
            "exe": "feetYards(20)",
            "answer": 6.666666666666667
        }
    ]
},
{
    "question": "Convert feet to miles",
    "template": "def feetMiles(feet):",
    "testCases": [
        {
            "exe": "feetMiles(5280)",
            "answer": 1.0
        },
        {
            "exe": "feetMiles(10560)",
            "answer": 2.0
        },
        {
            "exe": "feetMiles(21120)",
            "answer": 4.0
        }
    ]
},
{
    "question": "Convert units of time to seconds",
    "template": "def convertTime(time, unit):",
    "testCases": [
        {
            "exe": "convertTime(5, 'seconds')",
            "answer": 5
        },
        {
            "exe": "convertTime(2, 'minutes')",
            "answer": 120
        },
        {
            "exe": "convertTime(1, 'hours')",
            "answer": 3600
        }
   
    ]
},
{
    "question": "Convert seconds to days",
    "template": "def secDays(seconds):",
    "testCases": [
        {
            "exe": "secDays(86400)",
            "answer": 1.0
        },
        {
            "exe": "secDays(172800)",
            "answer": 2.0
        },
        {
            "exe": "secDays(259200)",
            "answer": 3.0
        }
    ]
},
{
    "question": "Convert seconds to hours",
    "template": "def secHours(seconds):",
    "testCases": [
        {
            "exe": "secHours(3600)",
            "answer": 1.0
        },
        {
            "exe": "secHours(7200)",
            "answer": 2.0
        },
        {
            "exe": "secHours(10800)",
            "answer": 3.0
        }
    ]
},
{
    "question": "Calculate body mass index",
    "template": "def calBmi(height, weight):\n    bmi = weight / (height ** 2)\n    return bmi",
    "testCases": [
      {
        "exe": "calBmi(1.7, 65)",
        "answer": 22.49
      },
      {
        "exe": "calBmi(1.65, 75)",
        "answer": 27.55
      },
      {
        "exe": "calBmi(1.8, 80)",
        "answer": 24.69
      }
    ]
  },
  {
    "question": "Convert pressure in kilopascals to pounds",
    "template": "def kiloPounds(kilopascals):",
    "testCases": [
      {
        "exe": "kiloPounds(100)",
        "answer": 22.480894387096
      },
      {
        "exe": "kiloPounds(200)",
        "answer": 44.961788774192
      },
      {
        "exe": "kiloPounds(300)",
        "answer": 67.442683161288
      }
    ]
  },      
  {
    "question": "Calculate sum of digits of a number",
    "template": "def sumDigits(number):",
    "testCases": [
      {
        "exe": "sumDigits(12345)",
        "answer": 15
      },
      {
        "exe": "sumDigits(987654321)",
        "answer": 45
      },
      {
        "exe": "sumDigits(111)",
        "answer": 3
      }
    ]
  },
  {
    "question": "Sort three integers without using conditional statements and loops",
    "template": "def sortInt(a, b, c):",
    "testCases": [
      {
        "exe": "sortInt(3, 1, 2)",
        "answer": [1, 2, 3]
      },
      {
        "exe": "sortInt(9, 5, 7)",
        "answer": [5, 7, 9]
      },
      {
        "exe": "sortInt(4, 4, 4)",
        "answer": [4, 4, 4]
      }
    ]
  },
  {
    "question": "Count the number of occurrence of a specific character in a string",
    "template": "def charCount(string, char):",
    "testCases": [
      {
        "exe": "charCount('Hello world', 'o')",
        "answer": 2
      },
      {
        "exe": "charCount('OpenAI is awesome!', 'e')",
        "answer": 3
      },
      {
        "exe": "charCount('Programming is fun', 'm')",
        "answer": 2
      }
    ]
  },
  {
    "question": "What is the ASCII value of a given letter in Python?",
    "template": "def ascii_value(letter):",
    "testCases": [
        {
            "input": "'a'",
            "output": "97"
        },
        {
            "input": "'Z'",
            "output": "90"
        },
        {
            "input": "'7'",
            "output": "55"
        }
    ]
},
{
    "question": "Swap two variables",
    "template": "def swapVar(a, b):",
    "testCases": [
      {
        "exe": "swapVar(5, 10)",
        "answer": "[10, 5]"
      },
      {
        "exe": "swapVar('Hello', 'World')",
        "answer": "['World', 'Hello']"
      },
      {
        "exe": "swapVar(3.14, 2.718)",
        "answer": "[2.718, 3.14]"
      }
    ]
  }
  
]
